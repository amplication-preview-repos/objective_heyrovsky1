/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, StockTransfer as PrismaStockTransfer } from "@prisma/client";

export class StockTransferServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StockTransferCountArgs, "select">
  ): Promise<number> {
    return this.prisma.stockTransfer.count(args);
  }

  async stockTransfers(
    args: Prisma.StockTransferFindManyArgs
  ): Promise<PrismaStockTransfer[]> {
    return this.prisma.stockTransfer.findMany(args);
  }
  async stockTransfer(
    args: Prisma.StockTransferFindUniqueArgs
  ): Promise<PrismaStockTransfer | null> {
    return this.prisma.stockTransfer.findUnique(args);
  }
  async createStockTransfer(
    args: Prisma.StockTransferCreateArgs
  ): Promise<PrismaStockTransfer> {
    return this.prisma.stockTransfer.create(args);
  }
  async updateStockTransfer(
    args: Prisma.StockTransferUpdateArgs
  ): Promise<PrismaStockTransfer> {
    return this.prisma.stockTransfer.update(args);
  }
  async deleteStockTransfer(
    args: Prisma.StockTransferDeleteArgs
  ): Promise<PrismaStockTransfer> {
    return this.prisma.stockTransfer.delete(args);
  }
}
