/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ProductVariant as PrismaProductVariant } from "@prisma/client";

export class ProductVariantServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProductVariantCountArgs, "select">
  ): Promise<number> {
    return this.prisma.productVariant.count(args);
  }

  async productVariants(
    args: Prisma.ProductVariantFindManyArgs
  ): Promise<PrismaProductVariant[]> {
    return this.prisma.productVariant.findMany(args);
  }
  async productVariant(
    args: Prisma.ProductVariantFindUniqueArgs
  ): Promise<PrismaProductVariant | null> {
    return this.prisma.productVariant.findUnique(args);
  }
  async createProductVariant(
    args: Prisma.ProductVariantCreateArgs
  ): Promise<PrismaProductVariant> {
    return this.prisma.productVariant.create(args);
  }
  async updateProductVariant(
    args: Prisma.ProductVariantUpdateArgs
  ): Promise<PrismaProductVariant> {
    return this.prisma.productVariant.update(args);
  }
  async deleteProductVariant(
    args: Prisma.ProductVariantDeleteArgs
  ): Promise<PrismaProductVariant> {
    return this.prisma.productVariant.delete(args);
  }
}
